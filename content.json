{"meta":{"title":"Existing","subtitle":"","description":"Volantis 是一个功能丰富、高度模块化的 Hexo 博客主题。得益于其强大的模块化特性，您可以轻松搭建一个极简风格的博客，也可以仿照官网搭建一个多人协作的、包含文档模块的大体量综合型博客。","author":"Volantis Team","url":"https://blog.hxq-001.top","root":"/"},"pages":[{"title":"所有分类","date":"2023-05-14T09:26:28.089Z","updated":"2023-05-14T09:26:28.089Z","comments":true,"path":"categories/index.html","permalink":"https://blog.hxq-001.top/categories/","excerpt":"","text":""},{"title":"","date":"2023-05-17T15:35:07.846Z","updated":"2023-05-17T15:35:07.846Z","comments":true,"path":"404.html","permalink":"https://blog.hxq-001.top/404","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"我的朋友们","date":"2023-05-17T14:29:54.475Z","updated":"2023-05-17T14:29:54.475Z","comments":true,"path":"friends/index.html","permalink":"https://blog.hxq-001.top/friends/","excerpt":"","text":""},{"title":"所有标签","date":"2023-05-14T09:20:35.632Z","updated":"2023-05-14T09:20:35.632Z","comments":true,"path":"tags/index.html","permalink":"https://blog.hxq-001.top/tags/","excerpt":"","text":""},{"title":"","date":"2023-05-14T09:18:33.758Z","updated":"2023-05-14T09:18:33.758Z","comments":true,"path":"about/index.html","permalink":"https://blog.hxq-001.top/about/","excerpt":"","text":"下面写关于自己的内容"}],"posts":[{"title":"如何使用nodejs制作一个邮箱验证功能","slug":"如何使用nodejs制作一个邮箱验证功能","date":"2023-06-18T13:08:49.000Z","updated":"2023-06-18T13:46:10.395Z","comments":true,"path":"如何使用nodejs制作一个邮箱验证功能/","link":"","permalink":"https://blog.hxq-001.top/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8nodejs%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E5%8A%9F%E8%83%BD/","excerpt":"","text":"教程：如何使用nodejs制作一个邮箱验证功能本教程将逐步引导您制作一个具有验证功能的应用程序。我们将使用 Express、Body Parser 和 Nodemailer 库来实现该功能。 准备下载所需的库 npm i body-parser &amp;&amp; nodemailer 步骤 1：设置 Express 应用程序首先，我们需要创建一个 Express 应用程序，并引入所需的库。 const express = require(&#x27;express&#x27;);const bodyParser = require(&#x27;body-parser&#x27;);const nodemailer = require(&#x27;nodemailer&#x27;);// 创建 Express 应用程序const app = express();// 解析请求体app.use(bodyParser.urlencoded(&#123; extended: false &#125;));app.use(bodyParser.json()); 步骤 2：配置邮件发送接下来，我们将配置 Nodemailer 来发送邮件。在这个例子中，我们将使用 QQ 邮箱作为邮件服务器。使用前请开通SMTP服务，简单易开通。具体步骤可参考网上教程。 // 邮件发送配置const transport = nodemailer.createTransport(&#123; host: &#x27;smtp.qq.com&#x27;, //连接的邮箱服务器 secureConnection: true, // 使用 SSL 进行加密 port: 465, // SMTP的端口号 auth: &#123; user: &#x27;xxx@qq.com&#x27;, // 发送邮件的邮箱 pass: &#x27;**********&#x27;, // 邮箱密码或授权码 &#125;,&#125;); 步骤 3：生成验证码我们将创建一个函数来生成验证码。在这个例子中，我们将生成一个 6 位数的验证码。 // 生成验证码const generateCode = () =&gt; &#123; const code = Math.floor(Math.random() * 1000000).toString().padStart(6, &#x27;0&#x27;); return code;&#125;; 步骤 4：存储验证码和有效期我们将使用对象来存储验证码和验证码的有效期。我们创建两个空对象 codeMap 和 codeExpiryMap 来分别存储验证码和验证码的有效期，以邮箱作为键。 const codeMap = &#123;&#125;; // 使用对象来存储验证码，以邮箱为键const codeExpiryMap = &#123;&#125;; // 使用对象来存储验证码的有效期，以邮箱为键 步骤 5：发送验证码邮件在这一步中，我们将创建一个路由来处理发送验证码的请求，并发送带有验证码的邮件。 // 发送验证码邮件app.post(&#x27;/send-code&#x27;, (req, res) =&gt; &#123; const email = req.body.email; const code = generateCode(); console.log(email, code); // 设置验证码有效期为 5 分钟 const expiryTime = new Date().getTime() + 5 * 60 * 1000; codeExpiryMap[email] = expiryTime; // 邮件内容 const mailOptions = &#123; from: &#x27;小明 xxxx@qq.com&#x27;, // 发送者邮箱 to: email, // 接收者邮箱 subject: &#x27;欢迎使用 xxx，验证码提醒&#x27;, // 邮件主题 html: ` &lt;div&gt; &lt;h1&gt;欢迎您使用 xxx！&lt;/h1&gt; &lt;p&gt;您的验证码是：&lt;span style=&quot;color: blue; font-size: 20px;&quot;&gt;$&#123;code&#125;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;请注意：请勿向任何人透露此验证码，包括本网站的工作人员。本邮件是您注册 xxx 的验证码，请勿回复此邮件。&lt;/p&gt; &lt;p&gt;如果您未在 xxx 上进行任何操作，请忽略此邮件。&lt;/p&gt; &lt;p&gt;验证码将在5分钟内有效，过期后将无法使用。&lt;/p&gt; &lt;p&gt;谢谢！&lt;/p&gt; &lt;/div&gt; `, &#125;; // 发送邮件 transport.sendMail(mailOptions, (error, info) =&gt; &#123; if (error) &#123; console.log(error); res.status(500).send(&#x27;邮件发送失败&#x27;); &#125; else &#123; console.log(`验证码已发送至$&#123;email&#125;`); codeMap[email] = code; // 存储验证码，以邮箱为键 console.log(1, codeMap[email]); // 添加此行，验证验证码是否正确存储 res.status(200).send(&#x27;验证码已发送&#x27;); &#125; &#125;);&#125;); 请注意：以上代码只是演示用途，实际应用中需要进行适当的安全性和错误处理。 步骤 6：验证验证码最后一步是创建一个路由来验证用户输入的验证码是否正确。 // 验证验证码app.post(&#x27;/verify-code&#x27;, (req, res) =&gt; &#123; const email = req.body.email; const code = req.body.code; const savedCode = codeMap[email]; console.log(codeMap[email]); console.log(email, code, savedCode); // 检查验证码是否过期 const currentTime = new Date().getTime(); if (currentTime &gt; codeExpiryMap[email]) &#123; console.log(`$&#123;email&#125;的验证码已过期`); res.status(401).send(&#x27;验证码验证失败&#x27;); return; &#125; if (code &amp;&amp; savedCode &amp;&amp; code.toString() === savedCode) &#123; console.log(`$&#123;email&#125;的验证码验证通过`); delete codeMap[email]; // 验证通过后删除验证码 res.status(200).send(&#x27;验证码验证通过&#x27;); &#125; else &#123; console.log(`$&#123;email&#125;的验证码验证失败`); res.status(401).send(&#x27;验证码验证失败&#x27;); &#125;&#125;); 步骤 7：启动服务器最后，我们通过监听端口来启动服务器。 app.listen(3000, () =&gt; &#123; console.log(&#x27;服务器已启动&#x27;);&#125;);","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://blog.hxq-001.top/categories/nodejs/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://blog.hxq-001.top/tags/nodejs/"}]},{"title":"test5","slug":"test5","date":"2023-05-17T10:16:16.490Z","updated":"2023-05-17T12:48:48.612Z","comments":true,"path":"test5/","link":"","permalink":"https://blog.hxq-001.top/test5/","excerpt":"","text":"test5 content...","categories":[],"tags":[]},{"title":"test3","slug":"test3","date":"2023-05-17T08:32:11.375Z","updated":"2023-05-17T14:13:49.605Z","comments":true,"path":"test3/","link":"","permalink":"https://blog.hxq-001.top/test3/","excerpt":"","text":"this test3","categories":[{"name":"dev","slug":"dev","permalink":"https://blog.hxq-001.top/categories/dev/"}],"tags":[{"name":"dev","slug":"dev","permalink":"https://blog.hxq-001.top/tags/dev/"},{"name":"test","slug":"test","permalink":"https://blog.hxq-001.top/tags/test/"}]},{"title":"Hello World3","slug":"hello-world","date":"2023-05-15T08:37:54.973Z","updated":"2023-05-17T12:48:52.447Z","comments":true,"path":"hello-world/","link":"","permalink":"https://blog.hxq-001.top/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://blog.hxq-001.top/categories/nodejs/"},{"name":"dev","slug":"dev","permalink":"https://blog.hxq-001.top/categories/dev/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://blog.hxq-001.top/tags/nodejs/"},{"name":"dev","slug":"dev","permalink":"https://blog.hxq-001.top/tags/dev/"},{"name":"test","slug":"test","permalink":"https://blog.hxq-001.top/tags/test/"}]}