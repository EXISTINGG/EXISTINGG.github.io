<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js分号的坑 是真的坑</title>
      <link href="/js%E5%88%86%E5%8F%B7%E7%9A%84%E5%9D%91-%E6%98%AF%E7%9C%9F%E7%9A%84%E5%9D%91/"/>
      <url>/js%E5%88%86%E5%8F%B7%E7%9A%84%E5%9D%91-%E6%98%AF%E7%9C%9F%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>当涉及到JavaScript中分号的使用时，有一些常见的坑需要注意。分号是JavaScript语法中的重要组成部分，它表示语句的结束。虽然JavaScript解释器通常会尝试自动插入分号，但这个行为是不稳定的，可能会导致一些令人困惑和难以诊断的问题。在下面的例子中，我们将探讨一个关于分号的常见陷阱。</p><h3 id="隐式分号插入"><a href="#隐式分号插入" class="headerlink" title="隐式分号插入"></a>隐式分号插入</h3><p>在JavaScript中，当你在不同行上编写代码时，解释器通常会自动插入分号以结束语句。这意味着你可能会在没有明确添加分号的情况下创建多个语句，从而导致代码不按预期工作。</p><p>考虑以下代码片段：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> queryRes</span><br><span class="line"><span class="keyword">let</span> querySql</span><br><span class="line"><span class="keyword">if</span> (username) &#123;</span><br><span class="line">  <span class="comment">// 使用用户名进行查询</span></span><br><span class="line">  querySql = <span class="string">&#x27;SELECT * FROM user WHERE username = ?&#x27;</span></span><br><span class="line">  [queryRes] = <span class="keyword">await</span> db.<span class="title function_">query</span>(querySql, username)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 使用邮箱进行查询</span></span><br><span class="line">  querySql = <span class="string">&#x27;SELECT * FROM user WHERE email = ?&#x27;</span></span><br><span class="line">  [queryRes] = <span class="keyword">await</span> db.<span class="title function_">query</span>(querySql, email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The first argument must be of type string or an </span><br><span class="line">instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined</span><br></pre></td></tr></table></figure><p>在这个示例中，JavaScript解释器会在querySql &#x3D; &#39;SELECT * FROM user WHERE username &#x3D; ?&#39;的末尾自动插入分号，因此它实际上被解释为两个独立的语句，而不是一个赋值语句。这可能导致意外的行为和错误。</p><p>为了避免这个问题，你应该始终在语句的末尾显式添加分号，以明确语句的结束：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> queryRes;</span><br><span class="line"><span class="keyword">let</span> querySql;</span><br><span class="line"><span class="keyword">if</span> (username) &#123;</span><br><span class="line">  <span class="comment">// 使用用户名进行查询</span></span><br><span class="line">  querySql = <span class="string">&#x27;SELECT * FROM user WHERE username = ?&#x27;</span>;</span><br><span class="line">  [queryRes] = <span class="keyword">await</span> db.<span class="title function_">query</span>(querySql, username);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 使用邮箱进行查询</span></span><br><span class="line">  querySql = <span class="string">&#x27;SELECT * FROM user WHERE email = ?&#x27;</span>;</span><br><span class="line">  [queryRes] = <span class="keyword">await</span> db.<span class="title function_">query</span>(querySql, email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上分号后正常运行</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用nodejs制作一个邮箱验证功能</title>
      <link href="/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8nodejs%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E5%8A%9F%E8%83%BD/"/>
      <url>/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8nodejs%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="教程：如何使用nodejs制作一个邮箱验证功能"><a href="#教程：如何使用nodejs制作一个邮箱验证功能" class="headerlink" title="教程：如何使用nodejs制作一个邮箱验证功能"></a>教程：如何使用nodejs制作一个邮箱验证功能</h1><p>本教程将逐步引导您制作一个具有验证功能的应用程序。我们将使用 Express、Body Parser 和 Nodemailer 库来实现该功能。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>下载所需的库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i body-parser &amp;&amp; nodemailer</span><br></pre></td></tr></table></figure><div class="story post-story"><h2 id="步骤-1：设置-Express-应用程序"><a href="#步骤-1：设置-Express-应用程序" class="headerlink" title="步骤 1：设置 Express 应用程序"></a>步骤 1：设置 Express 应用程序</h2><p>首先，我们需要创建一个 Express 应用程序，并引入所需的库。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Express 应用程序</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="步骤-2：配置邮件发送"><a href="#步骤-2：配置邮件发送" class="headerlink" title="步骤 2：配置邮件发送"></a>步骤 2：配置邮件发送</h2><p>接下来，我们将配置 Nodemailer 来发送邮件。在这个例子中，我们将使用 QQ 邮箱作为邮件服务器。使用前请开通SMTP服务，简单易开通。具体步骤可参考网上教程。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 邮件发送配置</span></span><br><span class="line"><span class="keyword">const</span> transport = nodemailer.<span class="title function_">createTransport</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;smtp.qq.com&#x27;</span>, <span class="comment">//连接的邮箱服务器</span></span><br><span class="line">  <span class="attr">secureConnection</span>: <span class="literal">true</span>, <span class="comment">// 使用 SSL 进行加密</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">465</span>, <span class="comment">// SMTP的端口号</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;xxx@qq.com&#x27;</span>, <span class="comment">// 发送邮件的邮箱</span></span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;**********&#x27;</span>, <span class="comment">// 邮箱密码或授权码</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="步骤-3：生成验证码"><a href="#步骤-3：生成验证码" class="headerlink" title="步骤 3：生成验证码"></a>步骤 3：生成验证码</h2><p>我们将创建一个函数来生成验证码。在这个例子中，我们将生成一个 6 位数的验证码。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成验证码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateCode</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> code = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000000</span>).<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> code;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="步骤-4：存储验证码和有效期"><a href="#步骤-4：存储验证码和有效期" class="headerlink" title="步骤 4：存储验证码和有效期"></a>步骤 4：存储验证码和有效期</h2><p>我们将使用对象来存储验证码和验证码的有效期。我们创建两个空对象 <code>codeMap</code> 和 <code>codeExpiryMap</code> 来分别存储验证码和验证码的有效期，以邮箱作为键。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> codeMap = &#123;&#125;; <span class="comment">// 使用对象来存储验证码，以邮箱为键</span></span><br><span class="line"><span class="keyword">const</span> codeExpiryMap = &#123;&#125;; <span class="comment">// 使用对象来存储验证码的有效期，以邮箱为键</span></span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="步骤-5：发送验证码邮件"><a href="#步骤-5：发送验证码邮件" class="headerlink" title="步骤 5：发送验证码邮件"></a>步骤 5：发送验证码邮件</h2><p>在这一步中，我们将创建一个路由来处理发送验证码的请求，并发送带有验证码的邮件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送验证码邮件</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/send-code&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> email = req.<span class="property">body</span>.<span class="property">email</span>;</span><br><span class="line">  <span class="keyword">const</span> code = <span class="title function_">generateCode</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(email, code);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置验证码有效期为 5 分钟</span></span><br><span class="line">  <span class="keyword">const</span> expiryTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">  codeExpiryMap[email] = expiryTime;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 邮件内容</span></span><br><span class="line">  <span class="keyword">const</span> mailOptions = &#123;</span><br><span class="line">    <span class="attr">from</span>: <span class="string">&#x27;小明 xxxx@qq.com&#x27;</span>, <span class="comment">// 发送者邮箱</span></span><br><span class="line">    <span class="attr">to</span>: email, <span class="comment">// 接收者邮箱</span></span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;欢迎使用 xxx，验证码提醒&#x27;</span>, <span class="comment">// 邮件主题</span></span><br><span class="line">    <span class="attr">html</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;欢迎您使用 xxx！&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;您的验证码是：&lt;span style=&quot;color: blue; font-size: 20px;&quot;&gt;<span class="subst">$&#123;code&#125;</span>&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;请注意：请勿向任何人透露此验证码，包括本网站的工作人员。本邮件是您注册 xxx 的验证码，请勿回复此邮件。&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;如果您未在 xxx 上进行任何操作，请忽略此邮件。&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;验证码将在5分钟内有效，过期后将无法使用。&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;谢谢！&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送邮件</span></span><br><span class="line">  transport.<span class="title function_">sendMail</span>(mailOptions, <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;邮件发送失败&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`验证码已发送至<span class="subst">$&#123;email&#125;</span>`</span>);</span><br><span class="line">      codeMap[email] = code; <span class="comment">// 存储验证码，以邮箱为键</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, codeMap[email]); <span class="comment">// 添加此行，验证验证码是否正确存储</span></span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;验证码已发送&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请注意：以上代码只是演示用途，实际应用中需要进行适当的安全性和错误处理。</p></div><div class="story post-story"><h2 id="步骤-6：验证验证码"><a href="#步骤-6：验证验证码" class="headerlink" title="步骤 6：验证验证码"></a>步骤 6：验证验证码</h2><p>最后一步是创建一个路由来验证用户输入的验证码是否正确。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证验证码</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/verify-code&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> email = req.<span class="property">body</span>.<span class="property">email</span>;</span><br><span class="line">  <span class="keyword">const</span> code = req.<span class="property">body</span>.<span class="property">code</span>;</span><br><span class="line">  <span class="keyword">const</span> savedCode = codeMap[email];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(codeMap[email]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(email, code, savedCode);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查验证码是否过期</span></span><br><span class="line">  <span class="keyword">const</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="keyword">if</span> (currentTime &gt; codeExpiryMap[email]) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;email&#125;</span>的验证码已过期`</span>);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&#x27;验证码验证失败&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (code &amp;&amp; savedCode &amp;&amp; code.<span class="title function_">toString</span>() === savedCode) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;email&#125;</span>的验证码验证通过`</span>);</span><br><span class="line">    <span class="keyword">delete</span> codeMap[email]; <span class="comment">// 验证通过后删除验证码</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;验证码验证通过&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;email&#125;</span>的验证码验证失败`</span>);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&#x27;验证码验证失败&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="步骤-7：启动服务器"><a href="#步骤-7：启动服务器" class="headerlink" title="步骤 7：启动服务器"></a>步骤 7：启动服务器</h2><p>最后，我们通过监听端口来启动服务器。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test3</title>
      <link href="/test3/"/>
      <url>/test3/</url>
      
        <content type="html"><![CDATA[<p>this test3</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World3</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener external nofollow noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener external nofollow noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener external nofollow noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>.</p><div class="story post-story"><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener external nofollow noreferrer">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener external nofollow noreferrer">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener external nofollow noreferrer">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener external nofollow noreferrer">Deployment</a></p></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
